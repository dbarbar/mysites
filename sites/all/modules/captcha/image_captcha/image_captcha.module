<?php

/**
 * Implementation of image captcha challenge for use with the captcha module
 *
 * Loosely Based on MyCaptcha by Heine Deelstra
 * (http://heine.familiedeelstra.com/mycaptcha-download)
 *
 */

DEFINE(IMAGE_CAPTCHA_ALLOWED_CHARACTERS, 'aAbBCdEeFfGHhijKLMmNPQRrSTtWXYZ23456789%$#!@+?*');

/**
 * Implementation of hook_help().
 */
function image_captcha_help($section) {
  switch ($section) {
    case 'admin/user/captcha/image_captcha':
      return '<p>' . t('The image captcha is the popular captcha type where a random text code is obfuscated in an image.') . '</p>';
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function image_captcha_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    // add an administration tab for image_captcha
    $items[] = array(
      'path' => 'admin/user/captcha/image_captcha',
      'title' => t('Image captcha'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('image_captcha_settings_form'),
      'access' => user_access('administer captcha'),
      'type' => MENU_LOCAL_TASK,
    );
    // callback for generating an image
    $items[] = array(
      'path' => 'image_captcha',
      'type' => MENU_CALLBACK,
      'access' => TRUE,
      'callback' => 'image_captcha_image',
    );
  }
  return $items;
}

/**
 * function for default font path
 */
function _image_captcha_default_font() {
  return drupal_get_path('module', 'image_captcha') . '/fonts/' . 'VeraSe.ttf';
}

/**
 * Configuration form for image_captcha
 */
function image_captcha_settings_form() {

  if (!function_exists('imagejpeg')) {
    drupal_set_message(t('Image captchas cannot be generated, because your PHP installation\'s GD library has no JPEG support.'), 'error');
  }

  $form = array();
  $form['image_captcha_image_allowed_chars'] = array(
    '#type' => 'textfield',
    '#title' => t('Characters to appear in the image'),
    '#default_value' => variable_get('image_captcha_image_allowed_chars', IMAGE_CAPTCHA_ALLOWED_CHARACTERS),
  );
  $form['image_captcha_font'] = array(
    '#type' => 'textfield',
    '#title' => t('Font'),
    '#default_value' => variable_get('image_captcha_font', _image_captcha_default_font()),
    '#description' => t('Path to a TrueType font file (.ttf), relative to the drupal root directory.'),
  );
  $form['image_captcha_code_min'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum captcha code length'),
    '#default_value' => (int) variable_get('image_captcha_code_min', 5),
    '#size' => 2,
    '#maxlength' => 2,
  );
  $form['image_captcha_code_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum captcha code length'),
    '#default_value' => (int) variable_get('image_captcha_code_max', 7),
    '#size' => 2,
    '#maxlength' => 2,
  );
  $form['image_captcha_char_noise'] = array(
    '#type' => 'checkbox',
    '#title' => t('Double vision'),
    '#default_value' => variable_get('image_captcha_char_noise', 0),
    '#description' => t('Characters appear twice in the image, overlayed onto each other.'),
  );
  $form['image_captcha_dot_noise'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add dots as noise'),
    '#default_value' => variable_get('image_captcha_dot_noise', 0),
    '#description' => t('Caution: Countless dots make the image harder to read.'),
  );
  $form['image_captcha_line_noise'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add lines as noise'),
    '#default_value' => variable_get('image_captcha_line_noise', 0),
    '#description' => t('Caution: Lines have a large effect on readability.'),
  );
  return system_settings_form($form);
}


/**
 * Validation function for image_captcha configuration form
 */
function image_captcha_settings_form_validate($form_id, $form_values) {
  if ($form_id == 'image_captcha_settings_form') {
    // check font
    $font = $form_values['image_captcha_font'];
    if (!file_exists($font)) {
      form_set_error('image_captcha_font', t('Path to font does not exist.'));
    }
    $font_pathinfo = pathinfo($font);
    if (strtolower($font_pathinfo['extension']) != 'ttf') {
      form_set_error('image_captcha_font', t('Font is not TrueType (no .ttf extension).'));
    }
    // check captcha code minimum and maximum lengths
    $code_min = (int) $form_values['image_captcha_code_min'];
    if ($code_min < 2 || $code_min > 10) {
      form_set_error('image_captcha_code_min', t('Minimum captcha code length should be an integer between 2 and 10 (and smaller than the maximum captcha code length).'));
    }
    $code_max = (int) $form_values['image_captcha_code_max'];
    if ($code_max < 2 || $code_max > 10 || $code_min > $code_max) {
      form_set_error('image_captcha_code_max', t('Maximum captcha code length should be an integer between 2 and 10 (and larger than the minimum captcha code length).'));
    }
  }
}

/**
 * Implementation of hook_captcha
 */
function image_captcha_captcha($op, $captcha_type='') {
  switch($op) {
    case 'list':
      // only offer image captcha if possible to generate an image captcha
      if (function_exists('imagejpeg')) {
        return array('Image');
      }
      else {
        return array();
      }
    case 'generate':
      if ($captcha_type == 'Image') {
        // generate a captcha code
        $allowed_chars = variable_get('image_captcha_image_allowed_chars', IMAGE_CAPTCHA_ALLOWED_CHARACTERS);
        $max = strlen($allowed_chars) - 1;
        $len = mt_rand((int)variable_get('image_captcha_code_min', 5), (int)variable_get('image_captcha_code_max', 7));
        $code = '';
        for ($i = 0; $i < $len; $i++) {
          $code .= $allowed_chars[mt_rand(0, $max)];
        }
        // store the answer in $_SESSION for the image generator function (which happens in another http request)
        $seed = mt_rand();
        $_SESSION['image_captcha'][$seed] = $code;
        // build the result to return
        $result = array();
        $result['value'] = $code;
        $result['form']['captcha_image'] = array(
          '#type' => 'markup',
          '#value' => '<img src="'. check_url(url("image_captcha/$seed")) .'" />',
        );
        $result['form']['captcha_answer'] = array(
          '#type' => 'textfield',
          '#title' => t('What code is in the image?'),
          '#description' => t('Copy the characters (respecting upper/lower case) from the image.'),
          '#weight' => 0,
          '#required' => TRUE,
        );
        return $result;
      }
    break;
  }
}

/**
 * menu callback function that generates the captcha image
 */
function image_captcha_image($seed=NULL) {
  if (!$seed) {
    return;
  }
  // get the code to draw from $_SESSION
  $code = $_SESSION['image_captcha'][$seed];
  // unset the code from $_SESSION to prevent rerendering the captcha
  unset($_SESSION['image_captcha']);
  // only generate an image if there is an code
  if ($code) {
    // generate the image
    $image = _image_captcha_generate_image($code);
    // Send the image resource as an image to the client
    drupal_set_header("Content-type: image/jpeg");
    // Following header is needed for Konqueror, which would re-request the image
    // on a mouseover event, which failes because the image can only be generated
    // once. This cache directive forces Konqueror to use cache instead of
    // re-requesting
    drupal_set_header("Cache-Control: max-age=3600, must-revalidate");
    // print the image as jpg to the client
    imagejpeg($image);
    // Clean up
    imagedestroy($image);
    exit();
  }
}


/**
 * Wave distortion from the LGPLed KCaptcha.
 *
 * http://freshmeat.net/projects/kcaptcha/
 *
 */
function _image_captcha_generate_image($code) {
  $len = strlen($code);

  $width = 50*$len; $height = 75;

  $font = variable_get('image_captcha_font', _image_captcha_default_font());

  $font_size = 37;
  $image = @imagecreatetruecolor($width, $height) or die('');

  // White background.
  $background_color = imagecolorallocate($image, 255, 255, 255);
  imagefilledrectangle($image, 0, 0, $width, $height, $background_color);

  // Generate random colors for the text (bright will become vague on wave distortion).
  $max_color = 4;
  for ($i = 0; $i <= $max_color; $i++) {
    $text_color[] = imagecolorallocate($image, mt_rand(0, 80), mt_rand(0, 80), mt_rand(0, 80));
  }

  _image_captcha_image_generator_print_string($image, $width, $height, $font, $font_size, $code, $text_color);

  $img  = $image;

  // Distort the image.
  $img2 = @imagecreatetruecolor($width, $height);

  $foreground_color = array(mt_rand(0, 100), mt_rand(0, 100), mt_rand(0, 100) );
  $background_color = array(255, 255, 215);
  $foreground = imagecolorallocate($img2, $foreground_color[0], $foreground_color[1], $foreground_color[2]);
  $background = imagecolorallocate($img2, $background_color[0], $background_color[1], $background_color[2]);

    $center = $width/2;

    $rand1 = mt_rand(750000, 1200000)/10000000;
    $rand2 = mt_rand(750000, 1200000)/10000000;
    $rand3 = mt_rand(750000, 1200000)/10000000;
    $rand4 = mt_rand(750000, 1200000)/10000000;
    // phases
    $rand5 = mt_rand(0, 3141592)/500000;
    $rand6 = mt_rand(0, 3141592)/500000;
    $rand7 = mt_rand(0, 3141592)/500000;
    $rand8 = mt_rand(0, 3141592)/500000;
    // amplitudes
    $rand9  = mt_rand(330, 420)/110;
    $rand10 = mt_rand(330, 450)/110;

    // Wave distortion from KCAPTCHA.
    for ($x = 0; $x < $width; $x++) {
      for ($y = 0; $y < $height; $y++) {
        $sx = $x + (sin($x * $rand1 + $rand5) + sin($y * $rand3 + $rand6)) * $rand9 - $width/2 + $center + 1;
        $sy = $y + (sin($x * $rand2 + $rand7) + sin($y * $rand4 + $rand8)) * $rand10;

        if ($sx < 0 || $sy < 0 || $sx >= $width - 1 || $sy >= $height - 1) {
          $color    = 255;
          $color_x  = 255;
          $color_y  = 255;
          $color_xy = 255;
        }
        else {
          $color    = imagecolorat($img, $sx, $sy) & 0xFF;
          $color_x  = imagecolorat($img, $sx+1, $sy) & 0xFF;
          $color_y  = imagecolorat($img, $sx, $sy+1) & 0xFF;
          $color_xy = imagecolorat($img, $sx+1, $sy+1) & 0xFF;
        }

        if ($color == 0 && $color_x == 0 && $color_y == 0 && $color_xy == 0) {
          $newred   = $foreground_color[0];
          $newgreen = $foreground_color[1];
          $newblue  = $foreground_color[2];
        }
        else if ($color == 255 && $color_x == 255 && $color_y == 255 && $color_xy == 255) {
          $newred   = $background_color[0];
          $newgreen = $background_color[1];
          $newblue  = $background_color[2];
        }
        else {
          $frsx  = $sx - floor($sx);
          $frsy  = $sy - floor($sy);
          $frsx1 = 1 - $frsx;
          $frsy1 = 1 - $frsy;

          $newcolor = (
            $color    * $frsx1 * $frsy1 +
            $color_x  * $frsx  * $frsy1 +
            $color_y  * $frsx1 * $frsy +
            $color_xy * $frsx  * $frsy
          );

          if ($newcolor > 255) {
            $newcolor=255;
          }

          $newcolor  = $newcolor/255;
          $newcolor0 = 1 - $newcolor;

          $newred   = $newcolor0 * $foreground_color[0] + $newcolor * $background_color[0];
          $newgreen = $newcolor0 * $foreground_color[1] + $newcolor * $background_color[1];
          $newblue  = $newcolor0 * $foreground_color[2] + $newcolor * $background_color[2];
        }

        // Store the character colors to use with (dot/line) noise generation.
        $latest = imagecolorallocate($img2, $newred, $newgreen, $newblue);
        if ($newred < 250 && $newgreen < 250 && $newblue < 250) {
          $colors[] = $latest;
        }
        imagesetpixel($img2, $x, $y, $latest);
      }
  }

  // Add additional noise.
  if (variable_get('image_captcha_dot_noise', 0)) {
    _image_captcha_image_generator_add_dots($img2, $width, $height, $colors);
  }
  if (variable_get('image_captcha_line_noise', 0)) {
    _image_captcha_image_generator_add_lines($img2, $width, $height, $colors);
  }

  imagedestroy($image);
  return $img2;
}

function _image_captcha_image_generator_add_lines(&$image, $width, $height, $colors) {
  for ($i = 0; $i < $width * $height / 500; $i++) {
    imageline($image, mt_rand(0, $width), mt_rand(0, $height), mt_rand(0, $width), mt_rand(0, $height), $colors[mt_rand(0, count($colors))]);
  }
}

function _image_captcha_image_generator_add_dots(&$image, $width, $height, $colors) {
  for ($i = 0; $i < ($width * $height) / 3; $i++ ) {
    imagesetpixel($image, mt_rand(0, $width), mt_rand(0, $height), $colors[mt_rand(0, count($colors))]);
  }
}

function _image_captcha_image_generator_print_string(&$image, $width, $height, $font, $font_size, $text, $colors, $offset = 0) {
  $len = strlen($text);
  $num_colors = count($colors) - 1;

  $entire_textbox = imagettfbbox($font_size, 0, $font, $text);

  $max_delta_x = ($width - $entire_textbox[4]) / $len;
  $x = $offset + mt_rand(0, $max_delta_x);
  for ($i = 0; $i < $len; $i++) {

    $textbox = imagettfbbox($font_size, 0, $font, $text[$i]);
    $char_width = abs($textbox[0]) + abs($textbox[2]);

    if ($x > $width - $char_width) {
      $x = $width - $char_width;
    }

    $y = abs($textbox[5]) + mt_rand(0, abs($textbox[5] / 2)) + 10;
    imagettftext($image, $font_size, 0, $x, $y, $color[mt_rand(0, $num_colors)], $font , $text[$i]);

    // Add the 'double vision' character noise.
    if (variable_get('image_captcha_char_noise', 0)) {
      $dup_x = $x + mt_rand(-23, 23);
      if ($dup_x < 0) {
        $dup_x = 0;
      }
      else if ($dup_x > $width - $char_width) {
        $dup_x = $width - $char_width;
      }
      $y = abs($textbox[5]) + mt_rand(0, abs($textbox[5] / 2)) + 10;
      imagettftext($image, $font_size, 0, $dup_x, $y, $color[mt_rand(0, $num_colors)], $font , $text[$i]);
      if ($dup_x > $x) {
        $x = $dup_x;
      }
    }
    $x += $char_width + mt_rand(-1, $max_delta_x);
  }
}
